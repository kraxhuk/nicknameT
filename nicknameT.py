import logging
import random
import string
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)
import logging
logging.basicConfig(level=logging.INFO)
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏
CHOOSE_LANGUAGE, CHOOSE_PLATFORM, CHOOSE_THEME, CHOOSE_ACTION, GENERATE_NICKS, SET_CONDITIONS, ADD_EMOJI, CONFIRM_NICK, CONFIRM_FINAL, CREATOR_INPUT_NAME, CREATOR_GENERATE = range(11)

# –ë–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
UKRAINIAN_WORDS = [
    '–§–µ–Ω—ñ–∫—Å', '–ú–∏—Å–ª–∏–≤–µ—Ü—å', '–ì–µ–Ω—ñ–π', '–í–æ—ó–Ω', '–¢—ñ–Ω—å', '–í—ñ—Ç–µ—Ä', '–ë–µ—Ä–∫—É—Ç', 
    '–ö–æ–∑–∞–∫', '–°–æ–∫—ñ–ª', '–ë—É—Ä–µ–≤—ñ–π', '–ì—Ä–æ–º', '–ú–µ—Ç–µ–ª–∏–∫', '–î—Ä–∞–∫–æ–Ω', '–í–æ—Ä–æ–Ω',
    '–ü—Ä–∏–≤–∏–¥', '–¢–∏—Ç–∞–Ω', '–Ø—Å—Ç—Ä—É–±', '–ë–∏—Å—Ç—Ä–∏–π', '–ù–µ–≤–∏–¥–∏–º–∏–π', '–§–∞–Ω—Ç–æ–º'
]

EMOJIS = ['üî•', 'üåü', 'üéÆ', 'üì∏', 'üé≠', 'üí´', '‚ö°', '‚ù§Ô∏è', 'üëë', 'üê∫', 'ü¶Ö', 'üêâ']

# –¢–µ–º–∏ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º
PLATFORM_THEMES = {
    'instagram': ['–§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è', '–ü–æ–¥–æ—Ä–æ–∂—ñ', '–ú–æ–¥–∞', '–á–∂–∞', '–ú–∏—Å—Ç–µ—Ü—Ç–≤–æ', '–°–ø–æ—Ä—Ç'],
    'tiktok': ['–¢–∞–Ω—Ü—ñ', '–ö–æ–º–µ–¥—ñ—è', '–ñ–∏—Ç—Ç—è', '–ß–µ–ª–ª–µ–Ω–¥–∂—ñ', '–ú—É–∑–∏–∫–∞', '–û—Å–≤—ñ—Ç–∞'],
    'youtube': ['–ì–µ–π–º—ñ–Ω–≥', '–í–ª–æ–≥–∏', '–ù–∞–≤—á–∞–Ω–Ω—è', '–û–≥–ª—è–¥–∏', 'DIY', '–ö—É–ª—ñ–Ω–∞—Ä—ñ—è'],
    'twitch': ['–°—Ç—Ä–∏–º–∏', '–ì–µ–π–º—ñ–Ω–≥', '–ú—É–∑–∏–∫–∞', '–¢–≤–æ—Ä—á—ñ—Å—Ç—å', '–°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è', 'IRL'],
    'telegram': ['–ê–Ω–æ–Ω—ñ–º–Ω—ñ—Å—Ç—å', '–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó', '–ú–µ–º–∏', '–ù–æ–≤–∏–Ω–∏', '–°–ø—ñ–ª—å–Ω–æ—Ç–∏', '–ë—ñ–∑–Ω–µ—Å'],
    'snapchat': ['–î—Ä—É–∑—ñ', '–ü–æ–¥—ñ—ó', '–°–µ–ª—Ñ—ñ', '–†–æ–∑–≤–∞–≥–∏', '–°–µ–∫—Ä–µ—Ç–∏', '–¢—Ä–µ–Ω–¥–∏']
}

def generate_random_nick(length=None):
    """–ì–µ–Ω–µ—Ä—É—î –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –Ω—ñ–∫ –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö –ª—ñ—Ç–µ—Ä"""
    if length is None:
        length = random.randint(4, 7)
    return ''.join(random.choice(string.ascii_letters) for _ in range(length))

def generate_name_based_nicks(name, language):
    """–ì–µ–Ω–µ—Ä—É—î –Ω—ñ–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ–º–µ–Ω—ñ"""
    name = name.lower().strip()
    variants = set()
    
    while len(variants) < 6:
        if language == 'ukrainian':
            # –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏
            suffix = random.choice(['–∫—Å', '—Å—Å', '–Ω–∫–æ', '—á–æ–∫', '–∏—á', '—é–≥–∞', '—è—Ä–∞', '—ñ–Ω–∞'])
            prefix = random.choice(['', 'super', 'ultra', '–º–∞–¥', '–ø—Ä–æ'])
            nick = f"{prefix}{name[:3]}{suffix}"
            
            # –î–æ–¥–∞—î–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∑ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–æ—é –±—É–∫–≤
            if random.random() > 0.5:
                nick = name[:2] + ''.join(random.sample(name[2:] + 'xyz', 3))
        else:
            # –ê–Ω–≥–ª—ñ–π—Å—å–∫—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏
            suffix = random.choice(['x', 'ss', 'er', 'ex', 'ox', 'ix', 'as', 'os'])
            prefix = random.choice(['', 'super', 'ultra', 'pro_', 'neo'])
            nick = f"{prefix}{name[:3]}{suffix}"
            
            # –î–æ–¥–∞—î–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∑ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –±—É–∫–≤
            if random.random() > 0.5:
                nick = name[:2] + ''.join(random.choice(string.ascii_lowercase) for _ in range(3))
        
        # –î–æ–¥–∞—î–º–æ —á–∏—Å–ª–∞ —É 30% –≤–∏–ø–∞–¥–∫—ñ–≤
        if random.random() > 0.7:
            nick += str(random.randint(1, 999))
        
        variants.add(nick)
    
    return list(variants)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if not update.message:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ –∫–æ–º–∞–Ω–¥–∏ /start")
        return ConversationHandler.END
    
    user = update.message.from_user
    logger.info("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %s —Ä–æ–∑–ø–æ—á–∞–≤ –≤–∑–∞—î–º–æ–¥—ñ—é", user.first_name)
    
    keyboard = [
        [InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data='ukrainian')],
        [InlineKeyboardButton("üá¨üáß English (random letters)", callback_data='english')],
        [InlineKeyboardButton("‚ú® –°—Ç–≤–æ—Ä—é–≤–∞—á", callback_data='creator')]
    ]
    
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤—ñ—Ç, {user.first_name}! –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return CHOOSE_LANGUAGE

async def start_from_scratch(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ù–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –∑ –ø–æ—á–∞—Ç–∫—É
    keyboard = [
        [InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data='ukrainian')],
        [InlineKeyboardButton("üá¨üáß English (random letters)", callback_data='english')],
        [InlineKeyboardButton("‚ú® –°—Ç–≤–æ—Ä—é–≤–∞—á", callback_data='creator')]
    ]
    
    await update.callback_query.message.reply_text(
        "üëã –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return CHOOSE_LANGUAGE


async def choose_language(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    choice = query.data
    if choice == 'creator':
        await query.edit_message_text(
            text="‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è (–∞–±–æ –±—É–¥—å-—è–∫–µ —Å–ª–æ–≤–æ), –Ω–∞ –æ—Å–Ω–æ–≤—ñ —è–∫–æ–≥–æ —è –∑–≥–µ–Ω–µ—Ä—É—é –Ω—ñ–∫–∏:"
        )
        return CREATOR_INPUT_NAME
    
    context.user_data['language'] = choice
    logger.info("–û–±—Ä–∞–Ω–∞ –æ–ø—Ü—ñ—è: %s", choice)
    
    keyboard = [
        [InlineKeyboardButton("Instagram", callback_data='instagram'),
         InlineKeyboardButton("TikTok", callback_data='tiktok')],
        [InlineKeyboardButton("YouTube", callback_data='youtube'),
         InlineKeyboardButton("Twitch", callback_data='twitch')],
        [InlineKeyboardButton("Telegram", callback_data='telegram'),
         InlineKeyboardButton("Snapchat", callback_data='snapchat')]
    ]
    
    await query.edit_message_text(
        text="–û–±–µ—Ä—ñ—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return CHOOSE_PLATFORM

async def choose_platform(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    platform = query.data
    context.user_data['platform'] = platform
    logger.info("–û–±—Ä–∞–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: %s", platform)
    
    themes = PLATFORM_THEMES[platform]
    keyboard = [[InlineKeyboardButton(theme, callback_data=f"theme_{i}")] for i, theme in enumerate(themes)]
    
    await query.edit_message_text(
        text=f"–û–±—Ä–∞–Ω–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É: {platform.capitalize()}\n–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return CHOOSE_THEME

async def choose_theme(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    platform = context.user_data['platform']
    theme_index = int(query.data.split('_')[1])
    theme = PLATFORM_THEMES[platform][theme_index]
    context.user_data['theme'] = theme
    logger.info("–û–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: %s", theme)
    
    keyboard = [
        [InlineKeyboardButton("üé≤ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏", callback_data='generate'),
         InlineKeyboardButton("‚öôÔ∏è –í–∫–∞–∑–∞—Ç–∏ —É–º–æ–≤–∏", callback_data='conditions')],
        [InlineKeyboardButton("üòä –î–æ–¥–∞—Ç–∏ –µ–º–æ–¥–∂—ñ", callback_data='emoji')]
    ]
    
    await query.edit_message_text(
        text=f"–û–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: {theme}\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return CHOOSE_ACTION

async def choose_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    action = query.data
    
    if action == 'generate':
        return await generate_nicks(update, context)
    elif action == 'conditions':
        await query.edit_message_text(
            text="üìù –í–∫–∞–∂—ñ—Ç—å —Å–≤–æ—ó —É–º–æ–≤–∏ –¥–ª—è –Ω—ñ–∫–Ω–µ–π–º–∞ (–¥–æ–≤–∂–∏–Ω–∞, —Å—Ç–∏–ª—å, –æ—Å–æ–±–ª–∏–≤—ñ –ø–æ–±–∞–∂–∞–Ω–Ω—è):\n"
                 "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: '—Ö–æ—á—É –Ω—ñ–∫ –∑ 5 –±—É–∫–≤ —É —Å—Ç–∏–ª—ñ —Ñ–µ–Ω—Ç–µ–∑—ñ'"
        )
        return SET_CONDITIONS
    elif action == 'emoji':
        await query.edit_message_text(
            text="–í–≤–µ–¥—ñ—Ç—å –µ–º–æ–¥–∂—ñ —è–∫—ñ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –¥–æ –Ω—ñ–∫–Ω–µ–π–º–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: üî•üåü):"
        )
        return ADD_EMOJI

async def creator_input_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message:
        name = update.message.text
        context.user_data['creator_name'] = name
        await update.message.reply_text(
            f"üîÆ –î–æ–±—Ä–µ, {name}! –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –¥–ª—è –Ω—ñ–∫–Ω–µ–π–º—ñ–≤:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data='creator_ukrainian')],
                [InlineKeyboardButton("üá¨üáß English", callback_data='creator_english')]
            ])
        )
        return CREATOR_GENERATE
    return CHOOSE_LANGUAGE

async def creator_generate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    language = query.data.replace('creator_', '')
    name = context.user_data.get('creator_name', 'User')
    
    nicks = generate_name_based_nicks(name, language)
    context.user_data['nicks'] = nicks
    
    keyboard = [[InlineKeyboardButton(nick, callback_data=f"nick_{i}")] for i, nick in enumerate(nicks)]
    
    await query.edit_message_text(
        text=f"üéâ –û—Å—å —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –Ω—ñ–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ–º–µ–Ω—ñ {name}:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return CONFIRM_NICK

async def generate_nicks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    if query:
        await query.answer()
    
    language = context.user_data.get('language', 'english')
    theme = context.user_data.get('theme', '')
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è 6 —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –Ω—ñ–∫–Ω–µ–π–º—ñ–≤
    nicks = set()
    while len(nicks) < 6:
        if language == 'ukrainian':
            word1 = random.choice(UKRAINIAN_WORDS)
            word2 = random.choice(UKRAINIAN_WORDS)
            nick = f"{word1}_{word2}"
            if random.random() > 0.7:
                nick += str(random.randint(1, 999))
        else:
            nick = generate_random_nick()
            if random.random() > 0.5:
                nick += str(random.randint(1, 999))
        
        nicks.add(nick)
    
    nicks = list(nicks)
    context.user_data['nicks'] = nicks
    
    keyboard = [[InlineKeyboardButton(nick, callback_data=f"nick_{i}")] for i, nick in enumerate(nicks)]
    
    if query:
        await query.edit_message_text(
            text="üéâ –û—Å—å 6 –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω—ñ–∫–Ω–µ–π–º—ñ–≤:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.message.reply_text(
            text="üéâ –û—Å—å 6 –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω—ñ–∫–Ω–µ–π–º—ñ–≤:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    return CONFIRM_NICK

async def set_conditions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_text = update.message.text
    context.user_data['conditions'] = user_text
    logger.info("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∫–∞–∑–∞–≤ —É–º–æ–≤–∏: %s", user_text)
    
    await update.message.reply_text("üîÆ –ì–µ–Ω–µ—Ä—É—é –Ω—ñ–∫–∏ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –≤–∞—à–∏—Ö –ø–æ–±–∞–∂–∞–Ω—å...")
    return await generate_nicks(update, context)

async def add_emoji(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_emojis = update.message.text
    context.user_data['emojis'] = user_emojis
    
    if 'nicks' not in context.user_data:
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É –∑–≥–µ–Ω–µ—Ä—É–π—Ç–µ –Ω—ñ–∫–Ω–µ–π–º–∏!")
        return await generate_nicks(update, context)
    
    nicks = context.user_data['nicks']
    emoji_list = [e for e in user_emojis if e in EMOJIS]
    
    if not emoji_list:
        emoji_list = random.sample(EMOJIS, 2)
    
    modified_nicks = []
    for nick in nicks:
        if random.random() > 0.5:
            modified = f"{random.choice(emoji_list)}{nick}{random.choice(emoji_list)}"
        else:
            modified = f"{nick}{''.join(random.sample(emoji_list, 2))}"
        modified_nicks.append(modified)
    
    context.user_data['nicks'] = modified_nicks
    
    keyboard = [[InlineKeyboardButton(nick, callback_data=f"nick_{i}")] for i, nick in enumerate(modified_nicks)]
    
    await update.message.reply_text(
        text="üòä –û—Å—å –Ω—ñ–∫–∏ –∑ –µ–º–æ–¥–∂—ñ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return CONFIRM_NICK

async def confirm_nick(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    nick_index = int(query.data.split('_')[1])
    chosen_nick = context.user_data['nicks'][nick_index]
    context.user_data['chosen_nick'] = chosen_nick
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data='confirm_yes'),
         InlineKeyboardButton("‚ùå –ù—ñ", callback_data='confirm_no')]
    ]
    
    await query.edit_message_text(
        text=f"–í–∏ –æ–±—Ä–∞–ª–∏: {chosen_nick}\n–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return CONFIRM_FINAL

async def confirm_final(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    if query.data == 'confirm_yes':
        chosen_nick = context.user_data['chosen_nick']
        await query.edit_message_text(
            text=f"üéâ –í–∞—à –Ω—ñ–∫–Ω–µ–π–º: {chosen_nick}\n–ì–∞—Ä–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!"
        )
        context.user_data.clear()
        return ConversationHandler.END
    else:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–º—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ
        await query.edit_message_text("–ü–æ—á–Ω–µ–º–æ —Å–ø–æ—á–∞—Ç–∫—É!")
        return await start_from_scratch(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text('–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è! –Ø–∫—â–æ –∑–∞—Ö–æ—á–µ—Ç–µ –Ω–æ–≤–∏–π –Ω—ñ–∫ - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å /start')
    context.user_data.clear()
    return ConversationHandler.END

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error("–ü–æ–º–∏–ª–∫–∞: %s", context.error, exc_info=True)
    if update.message:
        await update.message.reply_text('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')

def main() -> None:
    application = Application.builder().token("7711097869:AAEEBOX2OT_W_fQm0P30IKlEIPvUUmYoqiE").build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSE_LANGUAGE: [CallbackQueryHandler(choose_language)],
            CREATOR_INPUT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, creator_input_name)],
            CREATOR_GENERATE: [CallbackQueryHandler(creator_generate)],
            CHOOSE_PLATFORM: [CallbackQueryHandler(choose_platform)],
            CHOOSE_THEME: [CallbackQueryHandler(choose_theme)],
            CHOOSE_ACTION: [CallbackQueryHandler(choose_action)],
            GENERATE_NICKS: [
                CallbackQueryHandler(generate_nicks, pattern='^generate$'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, generate_nicks)
            ],
            SET_CONDITIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_conditions)],
            ADD_EMOJI: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_emoji)],
            CONFIRM_NICK: [CallbackQueryHandler(confirm_nick, pattern='^nick_')],
            CONFIRM_FINAL: [CallbackQueryHandler(confirm_final, pattern='^confirm_')],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)
    
    application.run_polling()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")

if __name__ == '__main__':
    main()